(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['grammar.pegjs'] = template({"compiler":[7,">= 4.0.0"],"main":function(container,depth0,helpers,partials,data) {
    return "{\n    var definition_counts = {};\n    var count = 0;\n}\n\nIlocProgram\n    = _ ins_list:InstructionList _ { return new ILOC.IlocProgram({instructions: ins_list}); }\n\nInstructionList\n    =  _ l:(l:label _ \":\" _ { return l; })? _ ins:Instruction ins_list:(mandatory_newline ins_list:InstructionList _n { return ins_list; })? {\n        ins.label = l;\n        if(ins_list != undefined) {\n            ins_list.unshift(ins);\n            return ins_list;\n        } else {\n            return [ins]\n        };\n    }\n\nInstruction\n    = _ op:Operation _ { return new ILOC.Instruction({operations: [ op ]}); }\n    / _ \"[\" _ op_list:OperationList _ \"]\" _ { return new ILOC.Instruction({ operations: op_list }); }\n\nOperationList\n    = _ op:Operation _ \";\" _ op_list:OperationList _ { op_list.unshift(op); return op_list; }\n    / _ op:Operation _ { return [ op ]; }\n\nOperation\n    = _ op:NormalOp _ { return op; }\n    / _ op:ControlFlowOp _ { return op; }\n\nNormalOp =\n    _ oc:opcode _ s:OperandList _ \"=>\" _ t:OperandList _ { return new ILOC.NormalOperation({ opcode:oc, sources: s, targets: t.map(function(operand) { if (definition_counts[operand.name]==undefined) { definition_counts[operand.name] = 1 }; operand.index=definition_counts[operand.name]++; return operand; }) }); }\n\nControlFlowOp\n    = _ oc:opcode _ s:(s:OperandList _ \"->\" { return s; })? _ t:OperandList _ { return new ILOC.ControlFlowOperation({opcode:oc, sources: s, targets: t, }); }\n    / _ oc: opcode _ { return new ILOC.ControlFlowOperation({opcode:oc}); }\n\nOperandList\n    = _ op:Operand _ \",\" _ op_list:OperandList _ { op_list.unshift(op); return op_list; }\n    / _ op:Operand _ { return [ op ]; }\n\nOperand\n    = _ r:register _ { return r; }\n    / _ n:num _ { return n; }\n    / _ l:label _ { return l; }\n\nregister\n    = _ \"r\" n:([0-9a-z_]i)+ _ { return new ILOC.Operand({ type: ILOC.OPERAND_TYPES.register, name: n.join(\"\") }); }\n\nlabel\n    = _ n:([0-9a-z_]i)+ _ { return new ILOC.Operand({ type: ILOC.OPERAND_TYPES.label, name: n.join(\"\") }); }\n\nnum\n    = _ n:([0-9]i)+ _ { return new ILOC.Operand({ type: ILOC.OPERAND_TYPES.num, name: n.join(\"\") }); }\n\nopcode\n    = _ n:([a-z0-9_]i)+ _ { return n.join(\"\"); }\n\n_\n    = w:[ \\t\\r]* { return w; }\n\n__\n    = w:[ \\t\\r]+ { return w; }\n\n_n\n    = w:[ \\n\\t\\r]* { return w; }\n\nmandatory_newline\n    = w:[ \\t\\r]*\"\\n\"[ \\t\\r]* { return w; }\n";
},"useData":true});
})();